%
% bxgrassator.def: Grass interpreter core
%
% This module is valid for any plain-compatible format and
% any TeX-derivative engine.
%--------------------------------------- variables, helpers
%\let\bxgsUseDebug=t
%%
\def\bxgs@empty{}
\def\bxgs@gobble#1{}
\ifx\bxgsError\undefined
  \def\bxgsError{\errmessage}
\fi
\begingroup
  \def\:{\global\let\bxgs@sptoken= }\: %
\endgroup
\ifx t\bxgsUseDebug
  \def\bxgsDebug#1{%
    \bxgs@semi\edef\bxgs@dtempa{#1}%
    \expandafter\bxgs@debug@a\meaning\bxgs@dtempa\bxgs@end
    \typeout{****\bxgs@dtempa}%
  }
  \def\bxgs@debug@a#1->#2\bxgs@end{\def\bxgs@dtempa{#2}}
\else
  \let\bxgsDebug\bxgs@gobble
\fi

%% variables
\newif\ifbxgs@ok  % versatile switch
\newcount\bxgs@i  % versatile counters
\newcount\bxgs@j
\newcount\bxgs@k
\let\bxgs@tmpa\bxgs@empty  % temp macro
\let\bxgs@gtmpa\bxgs@empty  % global temp macro
% (external)
%\let\bxgsProgArray\@undefined  % program array (list of PAbs/PApp)
%\let\bxgsInput\@undefined  % input string
%\let\bxgsOutput\@undefined  % output string

%% \bxgs@frozen
% An unexpandable token.
\let\bxgs@frozen\relax

%% \bxgs@end
% A uniqeu token.
\def\bxgs@end{\noexpand\bxgs@END}

%--------------------------------------- protection mechanism

%% \bxgs@protect\CS
% Protector for a macro token.
\def\bxgs@protect#1{%
  \expandafter\bxgs@protect@a
   \csname\expandafter\bxgs@gobble\string#1@@\endcsname #1%
}
\def\bxgs@protect@a#1#2{%
  \let#1=#2\def#2{\bxgs@protected@do#2#1}%
}

%% \bxgs@protect@on/off
% Turns on/off protection.
\def\bxgs@protect@on{%
  \let\bxgs@protected@do\bxgs@protected@do@
}
\def\bxgs@protect@off{%
  \let\bxgs@protected@do\bxgs@gobble
}
\def\bxgs@protected@do@#1#2{\noexpand#1}
\bxgs@protect@off

%% \bxgs@semi\edef
% Does \edef where protected macros are left unexpanded.
\def\bxgs@semi{%
  \bxgs@protect@on \afterassignment\bxgs@protect@off
}

%% \bxgs@def@protected
% Defines a protected macro.
\def\bxgs@def@protected#1{%
  \def\bxgs@next{\bxgs@protect#1}%
  \afterassignment\bxgs@next \def#1%
}

%--------------------------------------- parser
%% variables
\let\bxgs@chunk\bxgs@empty  % result of first pass
\chardef\bxgs@chunk@fil\z@  % bxgs@chunk is nonempty?

%%<+> \bxgsParse{<lang>}{<source>}
\def\bxgsParse#1{% |{<source>}
  \csname bxgs@parse@#1\endcsname
}

%% \bxgs@parse@init
% Srart-up process independent of source languages.
\def\bxgs@parse@init{%
  \let\bxgs@progarray\bxgs@empty
  \let\bxgs@chunk\bxgs@empty \chardef\bxgs@chunk@fil\z@
  \let\bxgs@App\bxgs@frozen \let\bxgs@Abs\bxgs@frozen
}

%% \bxgs@parse@grass{<string>}
% Parses the given source string, and stores the resulted program
% array to \bxgs@progarray.
\def\bxgs@parse@grass#1{%
  \bxgs@parse@init
  \bxgs@i\z@ \let\bxgs@prev\relax \let\bxgs@do\relax
  \let\bxgs@next\bxgs@parse@grass@first
  \bxgs@next#1\relax
  \let\bxgsProgArray\bxgs@progarray
  \bxgs@parse@exit
}

%% \bxgs@parse@grass@first{<string>}
% First pass (<string> -> \bxgs@chunk).
\def\bxgs@parse@grass@first#1{%
  \if#1\relax
    \edef\bxgs@chunk{\bxgs@chunk
     \bxgs@do\bxgs@prev\the\bxgs@i;\bxgs@do v1;}%
    \let\bxgs@next\bxgs@parse@grass@second
  \else
    \bxgs@parse@grass@first@tok#1%
  \fi
  \bxgs@next
}
\def\bxgs@parse@grass@first@tok#1{%
  \ifnum 0\if w#11\fi\if W#11\fi\if v#11\fi>\z@
    \if #1\bxgs@prev
      \advance\bxgs@i\@ne
    \else
      \ifnum \the\bxgs@chunk@fil \if w\bxgs@prev 1\fi >\z@
        \edef\bxgs@chunk{\bxgs@chunk
         \bxgs@do\bxgs@prev\the\bxgs@i;}%
        \chardef\bxgs@chunk@fil\@ne
      \fi
      \def\bxgs@prev{#1}\bxgs@i\@ne
    \fi
  \fi
}

%% \bxgs@parse@grass@second
% Second pass (\bxgs@chunk -> \bxgs@progarray).
\def\bxgs@parse@grass@second{%
  \let\bxgs@do\bxgs@parse@grass@second@tok
  \def\bxgs@state{v}%
  \bxgs@chunk
  \bxgs@validate
}
\def\bxgs@parse@grass@second@tok#1#2;{%
  \csname bxgs@PGST@\bxgs@state#1\endcsname\bxgs@parse@invalid{#2}%
  \def\bxgs@state{#1}%
}
\def\bxgs@PGST@vw#1#2{%
  \def\bxgs@abs{\bxgs@Abs{#2}{\bxgs@body}}\let\bxgs@body\bxgs@empty
}
\def\bxgs@PGST@vW#1#2{%
  \def\bxgs@abs{\bxgs@Abs{0}{\bxgs@body}}\let\bxgs@body\bxgs@empty
  \def\bxgs@app{\bxgs@App{#2}{\bxgs@di}}\let\bxgs@di\bxgs@empty
}
\def\bxgs@PGST@wv#1#2{%
  \bxgs@add@abs
}
\def\bxgs@PGST@wW#1#2{%
  \def\bxgs@app{\bxgs@App{#2}{\bxgs@di}}\let\bxgs@di\bxgs@empty
}
%\def\bxgs@PGST@Wv#1#2{%
%  \edef\bxgs@body{\bxgs@body\bxgs@app}%
%  \bxgs@add@abs
%}
\def\bxgs@PGST@Ww#1#2{%
  \def\bxgs@di{#2}%
  \edef\bxgs@body{\bxgs@body\bxgs@app}%
}
\def\bxgs@add@abs{%
  \expandafter\bxgs@add@abs@a\bxgs@abs
}
\def\bxgs@add@abs@a#1#2#3{%
  \ifnum#2=\z@
    \edef\bxgs@progarray{\bxgs@progarray#3}%
  \else
    \edef\bxgs@progarray{\bxgs@progarray\bxgs@abs}%
  \fi
}

%% \bxgs@validate
% Validates the program list stored in \bxgs@progarray.
\def\bxgs@validate{%
  \let\bxgs@App\bxgs@validate@App
  \let\bxgs@Abs\bxgs@validate@Abs
  \bxgs@oktrue \bxgs@progarray
  \ifbxgs@ok\else \expandafter\bxgs@parse@invalid \fi
}
\def\bxgs@validate@App#1#2{\if @#2@\bxgs@okfalse\fi}
\def\bxgs@validate@Abs#1#2{#2}

%% \bxgs@parse@invalid
% Called when the parsing failed for some reason.
\def\bxgs@parse@invalid{%
  \bxgsError{Program validation failed}%
  \bxgs@parse@escape
}

%% \bxgs@parse@escape
\def\bxgs@parse@escape#1\bxgs@parse@exit{%
  \let\bxgs@progarray\bxgs@empty
}

%% \bxgs@parse@exit
% A marker used for bombout.
\let\bxgs@parse@exit\relax

%--------------------------------------- interpreter
%% variables
\newif\ifbxgs@in@abs % (cf.\bxgs@gather)
\let\bxgs@cval\@undefined  % character value (cf.\bxgs@Cval)
\newcount\bxgs@pc  % program counter
\let\bxgs@epc\@undefined  % end-program counter
\newcount\bxgs@last  % last index of local env.
\let\bxgs@glast\@undefined  % last-effective index of global env.
% \bxgs@Prog/#
% \bxgs@Appl/#
% \bxgs@GEnv/#
% \bxgs@Env/#

%%<+> \bxgsInvoke
% Executes the program stored in \bxgsProgArray, with the input
% string \bxgsInput. The output string goes to \bxgsOutput.
\def\bxgsInvoke{%
  \begingroup
    \global\let\bxgs@str@in\bxgsInput
    \global\let\bxgs@str@out\bxgs@empty
    \bxgs@new
    \bxgs@global@run
    \bxgs@invoke@exit
  \endgroup
  \let\bxgsOutput\bxgs@str@out
}

%%///////////////////////

%% bxgs@get
\def\bxgs@get#1#2{%
  \csname bxgs@#1/\number#2\endcsname
}
%% bxgs@put
\def\bxgs@put#1#2{%
  \expandafter\def\csname bxgs@#1/\number#2\endcsname
}
%% bxgs@eput
\def\bxgs@eput#1#2{%
  \expandafter\edef\csname bxgs@#1/\number#2\endcsname
}
\def\bxgs@env@local{Env}
\def\bxgs@env{GEnv}

%% bxgs@get@env
\def\bxgs@get@env#1{%
  \csname bxgs\ifnum#1>\bxgs@glast @\else @G\fi Env%
   /\number#1\endcsname
}

\def\bxgs@new{%
  \bxgs@gather
  \bxgs@pc=1 \let\bxgs@epc\bxgs@lProg
  \bxgs@last=4 \let\bxgs@glast\maxdimen
}

\def\bxgs@global@run{%
  \let\bxgs@PAbs\bxgs@do@abs
  \let\bxgs@PApp\bxgs@do@app@pre
  \let\bxgs@App\bxgs@do@app
  \bxgs@global@run@a
  \bxgs@semi\edef\bxgs@ret{\bxgs@get@env\bxgs@last}%
}
\def\bxgs@global@run@a{%
  \ifnum\bxgs@epc<\bxgs@pc\else
\bxgsDebug{pc=g\the\bxgs@pc}%
    \bxgs@get{Prog}{\bxgs@pc}%
    \advance\bxgs@pc\@ne
    \expandafter\bxgs@global@run@a
  \fi
}

%% \bxgs@do@app@pre{<idx>}
% The index points to Appl array.
\def\bxgs@do@app@pre#1{%
  \let\bxgs@App\bxgs@do@app
  \bxgs@get{Appl}{#1}%
}

%% bxgs@do@abs{<arg>}{<pc>}{<epc>}
\def\bxgs@do@abs#1#2#3{%
\bxgsDebug{ Abs(#1;#2/#3)}%
  \bxgs@i=#1\relax \advance\bxgs@i\m@ne
  \edef\bxgs@cenv{%
    {#2}{#3}{\the\bxgs@i}{\the\bxgs@last}{\the\bxgs@last}}%
  \advance\bxgs@last\@ne
  \bxgs@semi\bxgs@eput\bxgs@env\bxgs@last{\bxgs@Term{\bxgs@cenv}}%
}

%% bxgs@do@app{<rbi>}{<dbi>}
\def\bxgs@do@app#1#2{%
\bxgsDebug{ App(#1,#2)}%
  \bxgs@i\bxgs@last \advance\bxgs@i\@ne
  \bxgs@j=-#1\advance\bxgs@j\bxgs@i
  \bxgs@semi\edef\bxgs@oprr{\bxgs@get@env{\bxgs@j}}%
  \bxgs@j=-#2\advance\bxgs@j\bxgs@i
  \bxgs@semi\edef\bxgs@oprd{\bxgs@get@env{\bxgs@j}}%
  \bxgs@oprr \bxgs@VApp\bxgs@oprd
\bxgsDebug{ret=\bxgs@ret}%
  \advance\bxgs@last\@ne
  \bxgs@semi\bxgs@eput\bxgs@env\bxgs@last{\bxgs@ret}%
}

%% \bxgs@term@app{<pc>}{<epc>}{<arg>}{<last>}{<glast>}
\def\bxgs@term@app#1#2#3#4#5{%
  \bxgs@i=#3\relax \advance\bxgs@i\m@ne
  \bxgs@j=#4\relax \advance\bxgs@j\@ne
  \bxgs@term@app@a{#1}{#2}{\the\bxgs@i}{\the\bxgs@j}{#5}%
}
\def\bxgs@term@app@a#1\bxgs@end{%
  \bxgs@semi\edef\bxgs@ret{\bxgs@Term{#1{\bxgs@oprd@}}}%
  \ifnum\bxgs@i<\z@
    \expandafter\bxgs@call
  \fi
}

%% \bxgs@call
\def\bxgs@call{%
  \begingroup
\bxgsDebug{Enter:\bxgs@ret}%
    \expandafter\bxgs@call@a\bxgs@ret
    \global\let\bxgs@gtempa\bxgs@ret
\bxgsDebug{Leave:\bxgs@ret}%
  \endgroup
  \let\bxgs@ret\bxgs@gtempa
}
\def\bxgs@call@a\bxgs@Term#1{% {{<pc>}...}
  \bxgs@call@b#1\bxgs@end
}
\def\bxgs@call@b#1#2#3#4#5{% {<pc>}...{<glast>}|{<val1>}...\bxgs@end
%\def\aqq{{#1}{#2}{#3}{#4}{#5}}\show\aqq
  \let\bxgs@env\bxgs@env@local
  \bxgs@pc=#1\relax \def\bxgs@epc{#2}%
  \bxgs@last=#4\relax \def\bxgs@glast{#5}%
  \bxgs@j=#5\relax \bxgs@call@c
}
\def\bxgs@call@c#1{% {<val1>}|{<val2>}...\bxgs@end
%\def\arq{#1}\show\arq
  \ifx\bxgs@end#1%
    \expandafter\bxgs@local@run
  \else
    \advance\bxgs@j\@ne
    \bxgs@put\bxgs@env\bxgs@j{#1}%
    \expandafter\bxgs@call@c
  \fi
}

%% \bxgs@local@run
\def\bxgs@local@run{%
  \bxgs@local@run@a
  \bxgs@semi\edef\bxgs@ret{\bxgs@get@env\bxgs@last}%
}
\def\bxgs@local@run@a{%
  \ifnum\bxgs@epc<\bxgs@pc\else
\bxgsDebug{pc=l\the\bxgs@pc}%
    \bxgs@get{Appl}{\bxgs@pc}%
    \advance\bxgs@pc\@ne
    \expandafter\bxgs@local@run@a
  \fi
}


%%////////////////////// (gather)

%% \bxgs@gather
% \bxgsProgArray -> \bxgs@Appl/# & \bxgs@Prog/#
\def\bxgs@gather{%
  \let\bxgs@App\bxgs@gather@App
  \let\bxgs@Abs\bxgs@gather@Abs
  \let\bxgs@PApp\bxgs@frozen \let\bxgs@PAbs\bxgs@frozen
  \bxgs@in@absfalse
  \bxgs@j=\z@ % length of Prog
  \bxgs@k=\z@ % length of Appl
  \bxgsProgArray
  \expandafter\def\csname bxgs@Appl/0\endcsname{\bxgs@App{3}{2}}%
  \advance\bxgs@k\@ne
  \expandafter\def\csname bxgs@Appl/\the\bxgs@k\endcsname
   {\bxgs@App{1}{1}}%
  \advance\bxgs@j\@ne
  \expandafter\edef\csname bxgs@Prog/\the\bxgs@j\endcsname
   {\bxgs@PApp{\the\bxgs@k}}%
  \edef\bxgs@lProg{\the\bxgs@j}%
  \edef\bxgs@lAppl{\the\bxgs@k}%
}
\def\bxgs@gather@Abs#1#2{%
  \bxgs@in@abstrue
  \advance\bxgs@k\@ne \edef\bxgs@the@pc{\the\bxgs@k}%
  \advance\bxgs@k\m@ne 
  #2%
  \let\bxgs@prog@add\bxgs@prog@add@App
  \advance\bxgs@j\@ne
  \expandafter\edef\csname bxgs@Prog/\the\bxgs@j\endcsname
   {\bxgs@PAbs{#1}{\bxgs@the@pc}{\the\bxgs@k}}%
  \bxgs@in@absfalse
}
\def\bxgs@gather@App#1#2{%
  \advance\bxgs@k\@ne
  \expandafter\def\csname bxgs@Appl/\the\bxgs@k\endcsname
   {\bxgs@App{#1}{#2}}%
  \ifbxgs@in@abs\else
    \advance\bxgs@j\@ne
    \expandafter\edef\csname bxgs@Prog/\the\bxgs@j\endcsname
     {\bxgs@PApp{\the\bxgs@k}}%
  \fi
}

%%////////////////////// (values)
\let\bxgs@cval\@undefined  % the fetched character value
\let\bxgs@Cval\@undefined  % character value fetch
\let\bxgs@VApp\@undefined  % value-application

%% \bxgs@Cval@NA
\def\bxgs@Cval@na{%
  \bxgsError{Cval request for non-character}%
  \bxgs@invoke@escape
}

%% \bxgs@Char
\bxgs@def@protected\bxgs@Char#1{%
  \chardef\bxgs@cval`#1\relax
  \let\bxgs@Cval\bxgs@empty
  \let\bxgs@VApp\bxgs@VApp@Char
}
\def\bxgs@VApp@Char#1{%
  \let\bxgs@cval@a\bxgs@cval #1%
  \bxgs@semi\edef\bxgs@ret{%
    \ifnum\bxgs@cval=\bxgs@cval@a \bxgs@True
    \else \bxgs@False
    \fi}%
  \let\bxgs@cval\bxgs@cval@a
}

%% \bxgs@let@Char\CS{<number>}
\def\bxgs@let@Char#1#2{%
  \lccode`!=#2\relax
  \lowercase{\bxgs@semi\edef#1{\bxgs@Char
    \ifnum#2=\z@ \bxgs@NUL \else !\fi}}%
}
\edef\bxgs@NUL{\expandafter\bxgs@gobble\string\^^@}

%% \bxgs@Char@w
\bxgs@let@Char\bxgs@Char@w{`w}

%% \bxgs@Succ
\bxgs@def@protected\bxgs@Succ{%
  \let\bxgs@Cval\bxgs@Cval@na
  \let\bxgs@VApp\bxgs@VApp@Succ
}
\def\bxgs@VApp@Succ#1{%
  #1\bxgs@Cval
  \bxgs@i\bxgs@cval \advance\bxgs@i\@ne
  \ifnum\bxgs@i>\@cclv \bxgs@i\z@ \fi
  \bxgs@let@Char\bxgs@ret\bxgs@i
}

%% \bxgs@Out
\bxgs@def@protected\bxgs@Out{%
  \let\bxgs@Cval\bxgs@Cval@na
  \let\bxgs@VApp\bxgs@VApp@Out
}
\def\bxgs@VApp@Out#1{%
  #1\bxgs@Cval
  \bxgs@put@char
  \bxgs@let@Char\bxgs@ret\bxgs@cval
}

%% \bxgs@In
\bxgs@def@protected\bxgs@In{%
  \let\bxgs@Cval\bxgs@Cval@na
  \let\bxgs@VApp\bxgs@VApp@In
}
\def\bxgs@VApp@In#1{%
  #1\bxgs@Cval
  \bxgs@get@char
  \bxgs@let@Char\bxgs@ret\bxgs@cval
}

%% \bxgs@Term
\bxgs@def@protected\bxgs@Term#1{%
  \def\bxgs@do@term{\bxgs@term@app#1\bxgs@end}%
  \let\bxgs@Cval\bxgs@Cval@na
  \let\bxgs@VApp\bxgs@VApp@Term
}
\def\bxgs@VApp@Term#1{%
  \def\bxgs@oprd@{#1}%
  \bxgs@do@term
}

%% \bxgs@False / \bxgs@True
\bxgs@semi\edef\bxgs@False{%
  \bxgs@Term{{1}{0}{1}{0}{0}}%
}
\bxgs@semi\edef\bxgs@Identity{%
  \bxgs@Term{{1}{0}{0}{0}{0}}%
}
\bxgs@semi\edef\bxgs@True{%
  \bxgs@Term{{0}{0}{1}{1}{0}{\bxgs@Identity}}%
}

%% initial global environment
\bxgs@semi\bxgs@eput{GEnv}{1}{\bxgs@In}
\bxgs@semi\bxgs@eput{GEnv}{2}{\bxgs@Char@w}
\bxgs@semi\bxgs@eput{GEnv}{3}{\bxgs@Succ}
\bxgs@semi\bxgs@eput{GEnv}{4}{\bxgs@Out}

%%////////////////////// (bombout)

%% \bxgs@invoke@escape
\def\bxgs@invoke@escape{%
  \csname bxgs@invoke@escape@\bxgs@env\endcsname
}
\def\bxgs@invoke@escape@Env{%
  \csname fi\endcsname \endgroup
  \csname bxgs@invoke@escape@\bxgs@env\endcsname
}
\def\bxgs@invoke@escape@GEnv#1\bxgs@invoke@exit{%
  \csname fi\endcsname
  \global\let\bxgs@str@out\@empty
}

%% \bxgs@invoke@exit
% A marker used for bombout process.
\let\bxgs@invoke@exit\relax


%%////////////////////// (virtual I/O)
\chardef\bxgsLF=10  % LF in str@out is given by this token
\chardef\bxgsSP=32  % space in str@out is given by this token

%% \bxgs@get@char
% Reads one character from \bxgs@str@in and sets \bxgs@cval.
\def\bxgs@get@char{%
  \ifx\bxgs@str@in\bxgs@empty\else
    \expandafter\bxgs@get@char@a\bxgs@str@in\bxgs@end
  \fi
}
\def\bxgs@get@char@a{%
  % don't discard spaces!
  \futurelet\bxgs@tempa\bxgs@get@char@b
}
\def\bxgs@get@char@b{%
  \ifx\bxgs@tempa\bxgs@sptoken
    \expandafter\bxgs@get@char@d
  \else
    \expandafter\bxgs@get@char@c
  \fi
}
\def\bxgs@get@char@c#1#2\bxgs@end{%
  \chardef\bxgs@cval`#1\relax \gdef\bxgs@str@in{#2}%
  \ifnum\bxgs@cval>\@cclv
    \expandafter\bxgs@invalid@char
  \fi
}
\def\bxgs@get@char@d{%
  \afterassignment\bxgs@get@char@e \let\bxgs@tempa= %
}
\def\bxgs@get@char@e#1\bxgs@end{%
  \chardef\bxgs@cval\bxgsSP \gdef\bxgs@str@in{#1}%
}
\def\bxgs@invalid@char{%
  \bxgsError{Non 8-bit character found}%
  \bxgs@invoke@escape
}

%% \bxgs@put@char
% Appends the character with value \bxgs@cval to \bxgs@str@out.
\def\bxgs@put@char{%
  \lccode`!=\bxgs@cval
  \lowercase{%
    \xdef\bxgs@str@out{\bxgs@str@out
      \ifnum\bxgs@cval=\bxgsLF \bxgsLF
      \else\ifnum\bxgs@cval=\bxgsSP \bxgsSP
      \else !\fi\fi}%
  }%
}

%--------------------------------------- stuff for debug

\def\bxgs@dump@A{%
  \bxgs@j\z@ \bxgs@k\z@ \let\bxgs@App\relax
  \loop \ifnum\bxgs@j<\bxgs@lProg
    \advance\bxgs@j\@ne
    \typeout{\csname bxgs@Prog/\the\bxgs@j\endcsname}%
  \repeat
  \loop \ifnum\bxgs@k<\bxgs@lAppl
    \advance\bxgs@k\@ne
    \typeout{\csname bxgs@Appl/\the\bxgs@k\endcsname}%
  \repeat
}

%--------------------------------------- all done
\endinput
% EOF
